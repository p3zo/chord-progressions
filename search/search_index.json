{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Chord Progressions is a Python library with tools to extract, analyze, and generate chord progressions.</p> <p>This library defines a chord as a set of two or more notes, and a chord progression as an ordered sequence of chords with specified durations. Various theories of music have more specific definitions of these concepts. This library imposes few constraints in order to be useful in many musical contexts.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install chord-progressions\n</code></pre>"},{"location":"#progressions","title":"Progressions","text":"<p>The core class of this library is the <code>Progression</code>.</p> <pre><code>from chord_progressions.progression import Progression\nProgression()\n</code></pre> <p>Below is an example of a progression with two chords.</p> <pre><code>[\n{\n\"id\": \"40664268-1e68-44df-b259-2ce3bb8d4b70\",\n\"ix\": 0,\n\"type\": \"diminished-seventh chord\",\n\"duration\": \"1m\",\n\"typeId\": 139,\n\"notes\": [\n\"A4\",\n\"C6\",\n\"F#6\",\n\"D#7\"\n],\n\"locked\": \"0\",\n\"metrics\": {}\n},\n{\n\"id\": \"87bc2fbf-8299-4070-b4db-70fa29c31e9c\",\n\"ix\": 1,\n\"type\": \"minor-major ninth chord\",\n\"duration\": \"1m\",\n\"typeId\": 101,\n\"notes\": [\n\"C4\",\n\"G4\",\n\"B4\",\n\"D#6\",\n\"D7\"\n],\n\"locked\": \"0\",\n\"metrics\": {}\n}\n]\n</code></pre>"},{"location":"#attributes","title":"Attributes","text":"<pre><code>id\nix\ntype\nduration\ntypeId\nnotes\nlocked\nmetrics\n</code></pre>"},{"location":"extract/","title":"Extract","text":"<p>Experimental functions for automatically extracting chord progressions from audio and midi.</p>"},{"location":"extract/#extract-chords-from-a-midi-file","title":"Extract chords from a midi file","text":"<pre><code>from chord_progressions.extract.midi import simplify_harmony\nfrom chord_progressions.extract.midi_harman import label_midi\nextracted = simplify_harmony('my_file.mid')\nharman_labels = label_midi(extracted)\n</code></pre>"},{"location":"extract/#extract-chords-from-an-audio-file","title":"Extract chords from an audio file","text":"<pre><code>from chord_progressions.extract.audio import extract_progression_from_audio\nprogression = extract_progression_from_audio('my_file.wav')\n</code></pre>"},{"location":"generate/","title":"Generate","text":""},{"location":"generate/#constraints","title":"Constraints","text":"<pre><code>pct_notes_common: int, default 0\n\n    The percent of pitch classes held in common between adjacent chords.\n    Higher values help the generator create more coherent progressions.\n\nnote_range_low: int, default 60\n\n    The lowest midi note number that the generator is allowed to use.\n\nnote_range_high: int, default 108\n\n    The highest midi note number that the generator is allowed to use.\n\nallowed_chord_types: list, default []\n\n    The list of chord types that the generator is allowed to use.\n    See the list of type templates in the [type_templates module](./type_templates.py].\n</code></pre> <p>Note that if you set the generator parameters to be overly restrictive, the generator will not be able to find a progression that meets the constraints. </p>"},{"location":"glossary/","title":"Glossary","text":"<p>Terms used in the code</p> Name Type Description Example midi_num str 60 note str C4 note_name str C octave int 4 pitch_class int 0 midi_nums list[int] [60, 48] notes list[str] [C4, C3] midi_nums_str str 60-48 or 60-48_62-52 note_str str C4-C3 or C4-C3_D4-E3 midi_nums_list list[list[int]] [[60, 48], [62, 52]] notes_list list[list[str]] [[C4, C3], [D4, E3]] chord_type str unison type_num int 1 type_id int Same as <code>type_num</code> type_num_str str 1*1 chord_types list[str] [ unison, unison ] duration str 1m durations list[str] [1m, 1m, 1m, 1m] duration_str str 1m_1m_1m_1m template list[int] An array of 12 pitch classes starting at C [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0] template_str str 101010101010 rotation list[int] A template transposed by any number of steps freq float 440.0 locks (todo: rename to lock_str) str 00100 voicing list[str] A notes_list chord Chord progression Progression"}]}